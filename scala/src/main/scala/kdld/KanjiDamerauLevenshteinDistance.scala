package kdld

import kdld.dld.CharacterLevelDLD
import kdld.element._

class KanjiDamerauLevenshteinDistance(characterLevelCostParameters: CostParameters,
                                      hbkkLevelCostParameters: CostParameters) {

  def result(term1: Term, term2: Term): Result = {
    val characterLevelDLD = new CharacterLevelDLD(characterLevelCostParameters, hbkkLevelCostParameters)
    characterLevelDLD.result(term1.kanjiList, term2.kanjiList)
  }
}

object KanjiDamerauLevenshteinDistance extends App {
  private val dld = new KanjiDamerauLevenshteinDistance(
    CostParameters(1, 1, 1, 0),
    CostParameters(1, 1, 1, 0.5))

  private val ocrResult = Term(
    Array[Kanji](
      Kanji(
        Array[Step](
          Step(
            Array[HBKK](
              AHBKK(
                "往".codePointAt(0),
                8
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "彳".codePointAt(0),
                3
              ),
              AHBKK(
                "主".codePointAt(0),
                5
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "彳".codePointAt(0),
                3
              ),
              AHBKK(
                "丶".codePointAt(0),
                1
              ),
              AHBKK(
                "王".codePointAt(0),
                4
              )
            )
          )
        ),
        "往".codePointAt(0)
      ),
      Kanji(
        Array[Step](
          Step(
            Array[HBKK](
              AHBKK(
                "文".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "亠".codePointAt(0),
                2
              ),
              AHBKK(
                "乂".codePointAt(0),
                2
              )
            )
          )
        ),
        "文".codePointAt(0)
      ),
      Kanji(
        Array[Step](
          Step(
            Array[HBKK](
              AHBKK(
                "書".codePointAt(0),
                10
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "聿".codePointAt(0),
                6
              ),
              AHBKK(
                "日".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "肀".codePointAt(0),
                4
              ),
              AHBKK(
                "二".codePointAt(0),
                2
              ),
              AHBKK(
                "日".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "肀".codePointAt(0),
                4
              ),
              AHBKK(
                "一".codePointAt(0),
                1
              ),
              AHBKK(
                "一".codePointAt(0),
                1
              ),
              AHBKK(
                "日".codePointAt(0),
                4
              )
            )
          )
        ),
        "書".codePointAt(0)
      )
    )
  )

  private val candidate1 = Term(
    Array[Kanji](
      Kanji(
        Array[Step](
          Step(
            Array[HBKK](
              AHBKK(
                "注".codePointAt(0),
                8
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "氵".codePointAt(0),
                3
              ),
              AHBKK(
                "主".codePointAt(0),
                5
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "氵".codePointAt(0),
                3
              ),
              AHBKK(
                "丶".codePointAt(0),
                1
              ),
              AHBKK(
                "王".codePointAt(0),
                4
              )
            )
          )
        ),
        "注".codePointAt(0)
      ),
      Kanji(
        Array[Step](
          Step(
            Array[HBKK](
              AHBKK(
                "文".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "亠".codePointAt(0),
                2
              ),
              AHBKK(
                "乂".codePointAt(0),
                2
              )
            )
          )
        ),
        "文".codePointAt(0)
      ),
      Kanji(
        Array[Step](
          Step(
            Array[HBKK](
              AHBKK(
                "書".codePointAt(0),
                10
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "聿".codePointAt(0),
                6
              ),
              AHBKK(
                "日".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "肀".codePointAt(0),
                4
              ),
              AHBKK(
                "二".codePointAt(0),
                2
              ),
              AHBKK(
                "日".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "肀".codePointAt(0),
                4
              ),
              AHBKK(
                "一".codePointAt(0),
                1
              ),
              AHBKK(
                "一".codePointAt(0),
                1
              ),
              AHBKK(
                "日".codePointAt(0),
                4
              )
            )
          )
        ),
        "書".codePointAt(0)
      )
    )
  )

  private val candidate2 = Term(
    Array[Kanji](
      Kanji(
        Array[Step](
          Step(
            Array[HBKK](
              AHBKK(
                "公".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "八".codePointAt(0),
                2
              ),
              AHBKK(
                "厶".codePointAt(0),
                2
              )
            )
          )
        ),
        "公".codePointAt(0)
      ),
      Kanji(
        Array[Step](
          Step(
            Array[HBKK](
              AHBKK(
                "文".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "亠".codePointAt(0),
                2
              ),
              AHBKK(
                "乂".codePointAt(0),
                2
              )
            )
          )
        ),
        "文".codePointAt(0)
      ),
      Kanji(
        Array[Step](
          Step(
            Array[HBKK](
              AHBKK(
                "書".codePointAt(0),
                10
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "聿".codePointAt(0),
                6
              ),
              AHBKK(
                "日".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "肀".codePointAt(0),
                4
              ),
              AHBKK(
                "二".codePointAt(0),
                2
              ),
              AHBKK(
                "日".codePointAt(0),
                4
              )
            )
          ),
          Step(
            Array[HBKK](
              AHBKK(
                "肀".codePointAt(0),
                4
              ),
              AHBKK(
                "一".codePointAt(0),
                1
              ),
              AHBKK(
                "一".codePointAt(0),
                1
              ),
              AHBKK(
                "日".codePointAt(0),
                4
              )
            )
          )
        ),
        "書".codePointAt(0)
      )
    )
  )

  val result1: Result = dld.result(ocrResult, candidate1)
  val result2: Result = dld.result(ocrResult, candidate2)

  println(ocrResult.toString)
  println(candidate1.toString)
  println(result1.toString)
  println(ocrResult.toString)
  println(candidate2.toString)
  println(result2.toString)
}
